package tespar;

final public class Alphabet {
    //Standard TESPAR alphabet
    private static byte[][] mAlphabet=
           //S=0  1  2  3  4  5
            {   { 1, 0, 0, 0, 0, 0},                    //D= 1
                { 2, 2, 0, 0, 0, 0},                    //D= 2
                { 3, 3, 3, 0, 0, 0},                    //D= 3
                { 4, 4, 4, 4, 0, 0},                    //D= 4
                { 5, 5, 5, 5, 0, 0},                    //D= 5
                { 6, 6, 6, 6, 6, 0},                    //D= 6
                { 6, 6, 6, 6, 6, 0},                    //D= 7
                { 7, 8, 8, 8, 8, 8},                    //D= 8
                { 7, 8, 8, 8, 8, 8},                    //D= 9
                { 7, 8, 8, 8, 8, 8},                    //D= 10
                { 9,10,10,10,10,10},               //D= 11
                { 9,10,10,10,10,10},               //D= 12
                { 9,10,10,10,10,10},               //D= 13
                {11,12,13,13,13,13},              //D= 14
                {11,12,13,13,13,13},              //D= 15
                {11,12,13,13,13,13},              //D= 16
                {11,12,13,13,13,13},              //D= 17
                {11,12,13,13,13,13},              //D= 18
                {14,15,16,17,17,17},              //D= 19
                {14,15,16,17,17,17},              //D= 20
                {14,15,16,17,17,17},              //D= 21
                {14,15,16,17,17,17},              //D= 22
                {14,15,16,17,17,17},              //D= 23
                {18,19,20,21,22,22},              //D= 24
                {18,19,20,21,22,22},              //D= 25
                {18,19,20,21,22,22},              //D= 26
                {18,19,20,21,22,22},              //D= 27
                {18,19,20,21,22,22},              //D= 28
                {18,19,20,21,22,22},              //D= 29
                {18,19,20,21,22,22},              //D= 30
                {23,24,25,26,27,28},              //D= 31
                {23,24,25,26,27,28},              //D= 32
                {23,24,25,26,27,28},              //D= 33
                {23,24,25,26,27,28},              //D= 34
                {23,24,25,26,27,28},              //D= 35
                {23,24,25,26,27,28},              //D= 36
                {23,24,25,26,27,28}};             //D= 37

          public static byte get(int aD, int aS ){
              if (aD<37 && aS<6)
                  return mAlphabet[aD-1][aS];
              else return 0;
           }
}
